// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@import '~@angular/material/theming';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$client-primary: mat-palette($mat-deep-purple);
$client-accent: mat-palette($mat-light-blue, A200, A100, A400);

// The warn palette is optional (defaults to red).
$client-warn: mat-palette($mat-red);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$client-theme: mat-dark-theme(
  (
    color: (
      primary: $client-primary,
      accent: $client-accent,
      warn: $client-warn,
    ),
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($client-theme);

/* You can add global styles to this file, and also import other style files */

html,
body {
  height: 100%;
}

body {
  > .speek-loader {
    position: fixed;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #121212;
    z-index: -1;
    @keyframes sprite {
      to {
        background-position: -7932px;
      }
    }

    .speek {
      width: 661px;
      height: 456px;
      background: url('/assets/hi-speek__sprite.svg');
      animation: sprite 2400ms steps(12) 1200ms;
      transform: translate(-25%, -25%) scale(0.5);
    }
    @media only screen and (min-width: 661px) {
      .speek {
        transform: scale(1);
      }
    }
  }
}

body {
  margin: 0;
  font-family: Roboto, 'Helvetica Neue', sans-serif;
}
body .mat-drawer-backdrop.mat-drawer-shown {
  background-color: rgba(0, 0, 0, 0.6);
}
body .mat-drawer-content {
  overflow: unset;
}
body .mat-expansion-panel {
  background-color: transparent;
  &:not(.mat-expanded):not([aria-disabled='true'])
    .mat-expansion-panel-header:hover {
    background: transparent;
  }
}

.auto-scroll {
  max-height: 100%;
  overflow: hidden;
}

.flex {
  display: flex;

  &.row {
    flex-direction: row;
  }
  &.col {
    flex-direction: column;
  }
  > .full {
    flex: 1;
  }

  &.align-center {
    align-items: center;
  }
  &.justify-center {
    justify-content: space-between;
  }

  &.center-center {
    align-items: center;
    justify-content: space-between;
  }
}
.pad {
  &-6 {
    padding: 6px;
  }
  &-12 {
    padding: 12px;
  }
  &-18 {
    padding: 18px;
  }
  &-24 {
    padding: 24px;
  }
}
.spacer {
  flex: 1 1 auto;
}
.mat-form-field {
  width: 100%;
}

.headers-align {
  .mat-expansion-panel-header-title {
    justify-content: space-between;
    align-items: center;
  }
  .mat-expansion-panel-header-title,
  .mat-expansion-panel-header-description {
    flex-basis: 0;
  }
}

// Drag Handler
// - terminal
.cdk-drag-dragging .cdk-drag-handle {
  cursor: grabbing;
}
.cdk-drag-handle {
  cursor: grab;
  &:active {
    cursor: grabbing;
  }
}

